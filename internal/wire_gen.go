// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

// import (
// 	"github.com/gin-gonic/gin"
// 	"github.com/google/wire"
// 	// "workerhive.com/api/config"
// 	// "workerhive.com/api/pkg/httpserver"
// 	// "workerhive.com/api/pkg/logger"
// 	// "workerhive.com/api/pkg/postgres"
// )

// // Injectors from wire.go:

// // Define the initialization functions.
// func InitializeConfig() (*config.Config, error) {
// 	configConfig, err := LoadConfig()
// 	if err != nil {
// 		return nil, err
// 	}
// 	return configConfig, nil
// }

// func InitializePostgresConnection() (*postgres.Postgres, error) {
// 	configConfig, err := LoadConfig()
// 	if err != nil {
// 		return nil, err
// 	}
// 	postgresPostgres := postgres.NewOrGetSingleton(configConfig)
// 	return postgresPostgres, nil
// }

// func InitializeLogger() (*logger.Logger, error) {
// 	configConfig, err := LoadConfig()
// 	if err != nil {
// 		return nil, err
// 	}
// 	loggerLogger := logger.New(configConfig)
// 	return loggerLogger, nil
// }

// func InitializeNewRouter() (*gin.Engine, error) {
// 	engine := NewRouter()
// 	return engine, nil
// }

// func InitializeNewHttpServer() (*httpserver.Server, error) {
// 	configConfig, err := LoadConfig()
// 	if err != nil {
// 		return nil, err
// 	}
// 	engine := NewRouter()
// 	server := httpserver.New(configConfig, engine)
// 	return server, nil
// }

// // wire.go:

// // Define a provider set with the necessary providers.
// var providerSet = wire.NewSet(postgres.NewOrGetSingleton, logger.New, httpserver.New, NewRouter,
// 	LoadConfig,
// )

// // Define a basic provider for the Gin router.
// func NewRouter() *gin.Engine {
// 	router := gin.Default()
// 	return router
// }

// // LoadConfig loads the configuration using koanf.
// func LoadConfig() (*config.Config, error) {
// 	return config.LoadConfig("config.yaml")
// }
